{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaina\\\\Documents\\\\iNotebook-main\\\\iNotebook-main\\\\src\\\\context\\\\NoteState.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport noteContext from './noteContext';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial); //Get all note\n\n  const getNotes = async () => {\n    // TODO : API CALL\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n  }; //Add a note\n\n\n  const addNote = async (title, description, tag) => {\n    // TODO : API CALL\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    console.log(\"Adding a new note\");\n    const note = json;\n    setNotes(notes.concat(note));\n  }; //Delete a note\n\n\n  const deleteNote = async id => {\n    // TODO : API CALL\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    console.log(\"Deleing a note with id\" + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; //Edit a note\n\n\n  const editNote = async (id, title, description, tag) => {\n    // TODO : API CALL\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    let newNotes = JSON.parse(JSON.stringify(notes));\n\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n\n    setNotes(newNotes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(noteContext.Provider, {\n    value: {\n      notes,\n      setNotes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","noteContext","useState","NoteState","props","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","json","console","log","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","_id","editNote","parse","index","length","element","children"],"sources":["C:/Users/jaina/Documents/iNotebook-main/iNotebook-main/src/context/NoteState.js"],"sourcesContent":["import React from 'react'\r\nimport noteContext from './noteContext'\r\nimport { useState } from 'react'\r\n\r\nconst NoteState = (props)=>{\r\n  const host = \"http://localhost:5000\"\r\n    const notesInitial = []\r\n      \r\n      const [notes, setNotes] = useState(notesInitial)\r\n      \r\n        //Get all note\r\n        const getNotes = async()=>{\r\n          // TODO : API CALL\r\n          const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n            method: 'GET', \r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'auth-token': localStorage.getItem('token')\r\n            }\r\n          });\r\n          const json = await response.json()\r\n          console.log(json)\r\n          setNotes(json);\r\n        }\r\n\r\n      //Add a note\r\n      const addNote = async(title, description, tag)=>{\r\n          // TODO : API CALL\r\n          const response = await fetch(`${host}/api/notes/addnote`, {\r\n            method: 'POST', \r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'auth-token': localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify({title, description, tag}) \r\n          });\r\n          const json = response.json(); \r\n\r\n          console.log(\"Adding a new note\")\r\n          const note = json;\r\n          setNotes(notes.concat(note))\r\n      }\r\n\r\n      //Delete a note\r\n      const deleteNote = async (id)=>{\r\n        // TODO : API CALL\r\n        const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n          method: 'DELETE', \r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'auth-token': localStorage.getItem('token')\r\n          },\r\n        });\r\n        const json = await response.json(); \r\n        console.log(json);\r\n\r\n        console.log(\"Deleing a note with id\" + id)\r\n        const newNotes = notes.filter((note)=> {return note._id!==id})\r\n         setNotes(newNotes);\r\n      }\r\n\r\n      //Edit a note\r\n      const editNote = async (id, title, description, tag)=>{\r\n        // TODO : API CALL\r\n        \r\n        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n          method: 'PUT', \r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'auth-token': localStorage.getItem('token')\r\n          },\r\n          body: JSON.stringify({title, description, tag}) \r\n        });\r\n        const json = response.json(); \r\n        let newNotes = JSON.parse(JSON.stringify(notes))\r\n      \r\n        for(let index=0; index<newNotes.length; index++){\r\n          const element = newNotes[index];\r\n          if(element._id === id){\r\n           newNotes[index].title = title;\r\n           newNotes[index].description = description;\r\n           newNotes[index].tag = tag;\r\n            break;\r\n          }\r\n        }\r\n        setNotes(newNotes)\r\n      }\r\n\r\n    return(\r\n        <noteContext.Provider value= {{notes, setNotes, addNote, deleteNote, editNote, getNotes}}>\r\n            {props.children}\r\n        </noteContext.Provider>\r\n    )\r\n    }\r\nexport default NoteState; "],"mappings":"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"},"metadata":{},"sourceType":"module"}